name: Deploy Infrastructure & Services

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  terraform:
    name: Terraform Apply
    if: false
    runs-on: ubuntu-latest
    outputs:
      manager_ip: ${{ steps.get_ip.outputs.manager_ip }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.0

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      - name: Get Swarm Manager IP
        id: get_ip
        run: echo "manager_ip=$(terraform -chdir=terraform output -raw manager_public_ip)" >> $GITHUB_OUTPUT


  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: mydockerhubuser/api
          tags: |
            type=ref,event=tag

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set image tag
        id: vars
        run: echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV

      - name: Build and push images
        run: |
          docker compose build
          docker compose push

  swarm:
    name: Update Docker Swarm Services
    if: false
    runs-on: ubuntu-latest
    needs: [terraform, docker]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Update services on Swarm
        run: |
          ssh -o StrictHostKeyChecking=no user@${{ needs.terraform.outputs.manager_ip }} \
            "docker stack deploy -c /home/user/docker-compose.yml mystack --with-registry-auth"