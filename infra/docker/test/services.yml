services:
  bff:
    image: tcero76/bff:${TAG}
    build:
      dockerfile: Dockerfile
      context: ../../bff
    working_dir: /bff
    volumes:
      - ../../bff:/bff
      - ../../postgres:/postgres
      - ../../clickhouse:/clickhouse
      - ../../rabbitmq:/rabbitmq
      - ../../redis:/redis
    profiles:
      - bff
    container_name: bff
    stdin_open: true
    tty: true
    environment:
      - DNS=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}?sslmode=disable&options=-c%20search_path%3Dmarketplace
      - PORT=3000
      - PORT_EXTERNAL=${PORT_EXTERNAL}
      - HOST_EXTERNAL=${HOST_EXTERNAL}
      - RedirectURL=/bff/callback
      - HYDRA_ADMIN_URL=http://hydra:4445
      - HYDRA_PUBLIC_URL=http://hydra:4444
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
      - CLICKHOUSE_PORT=9000
      - GOOGLE_OAUTH2_CLIENT_ID=${GOOGLE_OAUTH2_CLIENT_ID}
      - GOOGLE_OAUTH2_CLIENT_SECRET=${GOOGLE_OAUTH2_CLIENT_SECRET}
      - GOOGLE_OAUTH2_REDIRECT_URI=${GOOGLE_OAUTH2_REDIRECT_URI}
      - PROFILE=${PROFILE}
      - REDIS_HOST=${REDIS_HOST}
    networks:
      - ${NETWORK_APPLICATION}
    depends_on:
      - db
      - cache
      - broker
      - envoy
      - clickhouse
  cache-updater-service:
    image: tcero76/cache-updater-service:${TAG}
    build:
      dockerfile: Dockerfile
      context: ../../cache-updater
    working_dir: /app
    profiles:
      - back
    container_name: cacheUpdater
    stdin_open: true
    tty: true
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - BROKER=${BROKER}
      - RABBITMQ_CHAT_CACHE_UPDATER_QUEUE=${RABBITMQ_CHAT_CACHE_UPDATER_QUEUE}
    networks:
      - ${NETWORK_APPLICATION}
    volumes:
      - ../../cache-updater:/app
    depends_on:
      - cache
      - broker
  broker-email:
    image: tcero76/broker-email:${TAG}
    build:
      dockerfile: Dockerfile
      context: ../../broker-email
    working_dir: /broker-email
    profiles:
      - back
    container_name: brokerEmail
    stdin_open: true
    tty: true
    environment:
      - RABBITMQ_USER_DB_UPDATER_QUEUE=${RABBITMQ_USER_DB_UPDATER_QUEUE}
      - BROKER=${BROKER}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    networks:
      - ${NETWORK_APPLICATION}
    volumes:
      - ../../broker-email:/broker-email
      - ../../rabbitmq:/rabbitmq
    depends_on:
      broker:
        condition: service_healthy
  db-updater-service:
    image: tcero76/db-updater-service:${TAG}
    build:
      dockerfile: Dockerfile
      context: ../../db-updater
    working_dir: /app  
    profiles:
      - back
    container_name: dbUpdater
    stdin_open: true
    tty: true
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}?sslmode=disable&options=-c%20search_path%3Dmarketplace
      - BROKER=${BROKER}
      - RABBITMQ_CHAT_DB_UPDATER_QUEUE=${RABBITMQ_CHAT_DB_UPDATER_QUEUE}
    networks:
      - ${NETWORK_APPLICATION}
    volumes:
      - ../../db-updater:/app
    depends_on:
      - db
      - broker
  user-db-broker:
    image: tcero76/user-db-broker:${TAG}
    build:
      dockerfile: Dockerfile
      context: ../../db-broker
    working_dir: /app  
    profiles:
      - back
    container_name: UserDbBroker
    stdin_open: true
    tty: true
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}?sslmode=disable&options=-c%20search_path%3Dmarketplace
      - RABBITMQ_USER_DB_UPDATER_QUEUE=${RABBITMQ_USER_DB_UPDATER_QUEUE}
      - RABBITMQ_USER_DB_UPDATER_EXCHANGE=${RABBITMQ_USER_DB_UPDATER_EXCHANGE}
      - BROKER=${BROKER}
    networks:
      - ${NETWORK_APPLICATION}
    volumes:
      - ../../db-broker:/app
      - ../../postgres:/postgres
    depends_on:
      - db
      - broker
  ws:
    image: tcero76/ws:${TAG}
    build:
      dockerfile: Dockerfile
      context: ../../ws
    container_name: ws
    profiles:
      - ws
    tty: true
    stdin_open: true
    environment:
      - MIX_ENV=dev
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE}
      - RABBITMQ_HOST=broker
    ports:
      - 4000:4000
    volumes:
      - ../../ws:/app
    depends_on:
      - broker
    networks:
      - ${NETWORK_APPLICATION}
  front:
    image: node:${NODE_VERSION}
    container_name: front
    profiles:
      - front
    working_dir: /app
    entrypoint: npm run dev
    tty: true
    stdin_open: true
    environment:
      - VITE_HOST=${HOST_URL}
      - VITE_WS=${HOST_WS}
      - VITE_CLIENT_ID=${CLIENT_ID}
      - VITE_PROFILE=${PROFILE}
    ports:
     - 5173:5173
    volumes:
      - ../../../front:/app
    networks:
      - ${NETWORK_APPLICATION}
    depends_on:
      - envoy
  solana-service:
    image: tcero76/solana-service:${TAG}
    build:
      dockerfile: Dockerfile
      context: ../../solana-service
    profiles:
      - solana
    working_dir: /app/
    restart: always
    entrypoint: [ "air"]
    container_name: solana-service
    tty: true
    stdin_open: true
    environment:
      - PROGRAMID=${PROGRAMID}
      - BROKER=${BROKER}
    volumes:
      - ../../solana-service:/app
    networks:
      - ${NETWORK_APPLICATION}
  scrap-worker:
    image: tcero76/scrap-worker:${TAG}
    build:
      dockerfile: Dockerfile
      context: ../../scrap-service
    working_dir: /app/
    profiles:
      - scrap
    command: [ "celery", "-A", "main", "worker", "--loglevel=debug", "-Q", "${SCRAPY_QUEUE}" ]
    container_name: scrap-worker
    tty: true
    stdin_open: true
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - BROKER=${BROKER}
      - PORT=8000
      - TOTAL_POSTS=${TOTAL_POSTS}
      - USERNAME_INSTA=${USERNAME_INSTA}
      - PASSWORD_INSTA=${PASSWORD_INSTA}
      - SCRAPY_QUEUE=${SCRAPY_QUEUE}
    volumes:
      - ../../scrap-service:/app
    depends_on:
      - broker
    networks:
      - ${NETWORK_APPLICATION}
  beat:
    image: tcero76/beat:${TAG}
    build:
      dockerfile: Dockerfile
      context: ../../beat
    working_dir: /app/
    profiles:
      - scrap
    container_name: beat
    entrypoint: [ "celery", "-A", "main", "beat", "--loglevel=debug"]
    tty: true
    stdin_open: true
    environment:
      - BROKER=${BROKER}
      - CRON_HOUR=${CRON_HOUR}
      - CRON_MINUTE=${CRON_MINUTE}
      - RECOMENDER_QUEUE=${RECOMENDER_QUEUE}
      - SCRAPY_QUEUE=${SCRAPY_QUEUE}
    volumes:
      - ../../beat:/app
    depends_on:
      - broker
      - scrap-worker
    networks:
      - ${NETWORK_APPLICATION}
  recomender:
    image: tcero76/recomender:${TAG}
    build:
      dockerfile: Dockerfile
      context: ../../recomender
    working_dir: /app/
    profiles:
      - scrap
    command: [ "celery", "-A", "main", "worker","--loglevel=debug", "-Q", "${RECOMENDER_QUEUE}" ]
    container_name: recomender
    tty: true
    stdin_open: true
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - BROKER=${BROKER}
      - PORT=8000
      - RECOMENDER_QUEUE=${RECOMENDER_QUEUE}
      - TOTAL_POSTS=${TOTAL_POSTS}
      - CACHE=redis://cache:6379/0
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
    volumes:
      - ../../recomender:/app
    depends_on:
      - broker
      - db
      - cache
    networks:
      - ${NETWORK_APPLICATION}
  mediamtx-service:
    image: tcero76/mediamtx-service:${TAG}
    build:
      dockerfile: Dockerfile
      context: ../../mediamtx-service
    container_name: mediamtx-service
    profiles:
      - media
    ports:
      - 3001:3001
    volumes:
      - ../../mediamtx-service:/app
    environment:
      - HYDRA_PUBLIC_URL=http://hydra:4444
      - TIME_SEC_WAIT_RTMP_CONECTION=60
      - PORT=3001
    networks:
      - ${NETWORK_APPLICATION}
networks:
  application:
    driver: bridge
