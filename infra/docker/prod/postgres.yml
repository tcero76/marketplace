services:
  db:
    image: timescale/timescaledb:${TIMESCALEDB_VERSION:-2.20.1-pg17}
    # command: >
    #   postgres -c wal_level=logical
    #            -c max_wal_senders=10
    #            -c max_replication_slots=10
    volumes:
      - ${POSTGRES_VOLUME:-/mnt/data/timescaleDB}/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
     - POSTGRES_PASSWORD=/run/secrets/postgres_password
     - POSTGRES_USER=${POSTGRES_USER}
     - POSTGRES_DB=${POSTGRES_DB}
     - PGDATA=/var/lib/postgresql/data/pgdata
    secrets:
      - postgres_password
    networks:
      - ${TF_VAR_overlay_network:-application}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.hostname == swarm-manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          memory: 512M
  flyway:
    image: tcero76/flyway
    build:
      dockerfile: Dockerfile
      context: ../../../postgres/migrations/
    deploy:
      mode: replicated-job
      restart_policy:
        condition: none
      placement:
        constraints:
          - node.hostname == swarm-manager
    entrypoint: sh -c
    command: |
      '
      echo "⏳ Esperando que la DB esté lista...";
      until pg_isready -h db -U "$${POSTGRES_USER}" -d "$${POSTGRES_DB}"; do
        sleep 3;
      done;
      echo "✅ DB lista. Ejecutando migraciones...";
      flyway -url=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB} \
      -user=${POSTGRES_USER} \
      -password=${POSTGRES_PASSWORD} \
      -schemas=marketplace,scrap \
      -locations=filesystem:/flyway/sql \
      -connectRetries=10 \
      migrate
      '
    networks:
      - ${NETWORK_APPLICATION:-application}
    depends_on:
      - db
volumes:
  postgres:
secrets:
  postgres_password:
    external: true
      